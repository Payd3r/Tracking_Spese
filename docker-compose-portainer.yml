services:
  # Database PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: tracking_spese_db
    environment:
      POSTGRES_DB: tracking_spese
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: tracking_spese_2024
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - tracking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tracking_spese"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: tracking_spese_api
    ports:
      - "4000:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tracking_network
    restart: unless-stopped
    environment:
      - DB_USER=postgres
      - DB_HOST=postgres
      - DB_NAME=tracking_spese
      - DB_PASSWORD=tracking_spese_2024
      - DB_PORT=5432
      - NODE_ENV=production

  # Applicazione Frontend (Produzione)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tracking_spese_frontend
    depends_on:
      - api
    networks:
      - tracking_network
    restart: unless-stopped
    environment:
      - NODE_ENV=production

volumes:
  postgres_data:
    driver: local

networks:
  tracking_network:
    driver: bridge 