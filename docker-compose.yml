services:
  # Database PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: tracking_spese_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: tracking_spese
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: tracking_spese_2024
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - tracking-internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Node.js
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: tracking_spese_api
    restart: unless-stopped
    ports:
      - "4000:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: tracking_spese_db
      DB_USER: postgres
      DB_PASSWORD: tracking_spese_2024
      DB_NAME: tracking_spese
      DB_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "sleep 5 && npm start"
    networks:
      - tracking-internal

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tracking_spese_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
    depends_on:
      - api
    networks:
      - tracking-internal

  # Adminer per gestione database
  adminer:
    image: adminer:latest
    container_name: tracking_spese_adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: tracking_spese_db
      ADMINER_DESIGN: pepa-linha-dark
    ports:
      - "8085:8080"
    depends_on:
      - postgres
    networks:
      - tracking-internal

volumes:
  postgres_data:
    driver: local

networks:
  tracking-internal:
    driver: bridge